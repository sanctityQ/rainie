/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.itiancai.passport.thrift

import com.twitter.scrooge.ThriftEnum

/**
* 系统代码
**/
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object SysCode {
  
  case object P2p extends com.itiancai.passport.thrift.SysCode {
    val value = 0
    val name = "P2p"
    val originalName = "P2P"
  }

  private[this] val _SomeP2p = _root_.scala.Some(com.itiancai.passport.thrift.SysCode.P2p)
  
  case object Finance extends com.itiancai.passport.thrift.SysCode {
    val value = 1
    val name = "Finance"
    val originalName = "FINANCE"
  }

  private[this] val _SomeFinance = _root_.scala.Some(com.itiancai.passport.thrift.SysCode.Finance)

  case class EnumUnknownSysCode(value: Int) extends com.itiancai.passport.thrift.SysCode {
    val name = "EnumUnknownSysCode" + value
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): com.itiancai.passport.thrift.SysCode =
    value match {
      case 0 => com.itiancai.passport.thrift.SysCode.P2p
      case 1 => com.itiancai.passport.thrift.SysCode.Finance
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownSysCode(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): com.itiancai.passport.thrift.SysCode =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownSysCode(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[com.itiancai.passport.thrift.SysCode] =
    value match {
      case 0 => _SomeP2p
      case 1 => _SomeFinance
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[com.itiancai.passport.thrift.SysCode] =
    name.toLowerCase match {
      case "p2p" => _SomeP2p
      case "finance" => _SomeFinance
      case _ => _root_.scala.None
    }

  lazy val list: List[com.itiancai.passport.thrift.SysCode] = scala.List[com.itiancai.passport.thrift.SysCode](
    com.itiancai.passport.thrift.SysCode.P2p,
    com.itiancai.passport.thrift.SysCode.Finance
  )
}


/**
* 系统代码
**/
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait SysCode extends ThriftEnum with Serializable