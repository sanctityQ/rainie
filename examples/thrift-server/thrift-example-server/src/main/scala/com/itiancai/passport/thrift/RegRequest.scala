/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.itiancai.passport.thrift

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}

/**
* 用户注册
**/
object RegRequest extends ThriftStructCodec3[RegRequest] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("RegRequest")
  val MobileField = new TField("mobile", TType.STRING, 1)
  val MobileFieldManifest = implicitly[Manifest[String]]
  val PasswordField = new TField("password", TType.STRING, 2)
  val PasswordFieldManifest = implicitly[Manifest[String]]
  val LoginNameField = new TField("loginName", TType.STRING, 3)
  val LoginNameFieldManifest = implicitly[Manifest[String]]
  val AutoLoginField = new TField("autoLogin", TType.BOOL, 4)
  val AutoLoginFieldManifest = implicitly[Manifest[Boolean]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      MobileField,
      false,
      true,
      MobileFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      PasswordField,
      true,
      false,
      PasswordFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      LoginNameField,
      true,
      false,
      LoginNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      AutoLoginField,
      false,
      false,
      AutoLoginFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: RegRequest): Unit = {
    if (_item.mobile == null) throw new TProtocolException("Required field mobile cannot be null")
  }

  def withoutPassthroughFields(original: RegRequest): RegRequest =
    new Immutable(
      mobile =
        {
          val field = original.mobile
          field
        },
      password =
        {
          val field = original.password
          field.map { field =>
            field
          }
        },
      loginName =
        {
          val field = original.loginName
          field.map { field =>
            field
          }
        },
      autoLogin =
        {
          val field = original.autoLogin
          field
        }
    )

  override def encode(_item: RegRequest, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): RegRequest = {

    var mobileOffset: Int = -1
    var _got_mobile = false
    var passwordOffset: Int = -1
    var loginNameOffset: Int = -1
    var autoLogin: Boolean = true

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                mobileOffset = _iprot.offsetSkipString
    
                _got_mobile = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'mobile' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                passwordOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'password' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                loginNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'loginName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.BOOL =>
    
                autoLogin = readAutoLoginValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'autoLogin' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_mobile) throw new TProtocolException("Required field 'mobile' was not found in serialized data for struct RegRequest")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      mobileOffset,
      passwordOffset,
      loginNameOffset,
      autoLogin,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): RegRequest =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): RegRequest = {
    var mobile: String = null
    var _got_mobile = false
    var password: _root_.scala.Option[String] = _root_.scala.None
    var loginName: _root_.scala.Option[String] = _root_.scala.None
    var autoLogin: Boolean = true
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                mobile = readMobileValue(_iprot)
                _got_mobile = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'mobile' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                password = _root_.scala.Some(readPasswordValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'password' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                loginName = _root_.scala.Some(readLoginNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'loginName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.BOOL =>
                autoLogin = readAutoLoginValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'autoLogin' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_mobile) throw new TProtocolException("Required field 'mobile' was not found in serialized data for struct RegRequest")
    new Immutable(
      mobile,
      password,
      loginName,
      autoLogin,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    mobile: String,
    password: _root_.scala.Option[String] = _root_.scala.None,
    loginName: _root_.scala.Option[String] = _root_.scala.None,
    autoLogin: Boolean = true
  ): RegRequest =
    new Immutable(
      mobile,
      password,
      loginName,
      autoLogin
    )

  def unapply(_item: RegRequest): _root_.scala.Option[scala.Product4[String, Option[String], Option[String], Boolean]] = _root_.scala.Some(_item)


  @inline private def readMobileValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeMobileField(mobile_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MobileField)
    writeMobileValue(mobile_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMobileValue(mobile_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(mobile_item)
  }

  @inline private def readPasswordValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writePasswordField(password_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PasswordField)
    writePasswordValue(password_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePasswordValue(password_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(password_item)
  }

  @inline private def readLoginNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeLoginNameField(loginName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(LoginNameField)
    writeLoginNameValue(loginName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLoginNameValue(loginName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(loginName_item)
  }

  @inline private def readAutoLoginValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeAutoLoginField(autoLogin_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AutoLoginField)
    writeAutoLoginValue(autoLogin_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAutoLoginValue(autoLogin_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(autoLogin_item)
  }


  object Immutable extends ThriftStructCodec3[RegRequest] {
    override def encode(_item: RegRequest, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): RegRequest = RegRequest.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[RegRequest] = RegRequest.metaData
  }

  /**
   * The default read-only implementation of RegRequest.  You typically should not need to
   * directly reference this class; instead, use the RegRequest.apply method to construct
   * new instances.
   */
  class Immutable(
      val mobile: String,
      val password: _root_.scala.Option[String],
      val loginName: _root_.scala.Option[String],
      val autoLogin: Boolean,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends RegRequest {
    def this(
      mobile: String,
      password: _root_.scala.Option[String] = _root_.scala.None,
      loginName: _root_.scala.Option[String] = _root_.scala.None,
      autoLogin: Boolean = true
    ) = this(
      mobile,
      password,
      loginName,
      autoLogin,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      mobileOffset: Int,
      passwordOffset: Int,
      loginNameOffset: Int,
      val autoLogin: Boolean,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends RegRequest {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val mobile: String =
      if (mobileOffset == -1)
        null
      else {
        _proto.decodeString(_buf, mobileOffset)
      }
    lazy val password: _root_.scala.Option[String] =
      if (passwordOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, passwordOffset))
      }
    lazy val loginName: _root_.scala.Option[String] =
      if (loginNameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, loginNameOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the RegRequest trait with additional state or
   * behavior and implement the read-only methods from RegRequest using an underlying
   * instance.
   */
  trait Proxy extends RegRequest {
    protected def _underlying_RegRequest: RegRequest
    override def mobile: String = _underlying_RegRequest.mobile
    override def password: _root_.scala.Option[String] = _underlying_RegRequest.password
    override def loginName: _root_.scala.Option[String] = _underlying_RegRequest.loginName
    override def autoLogin: Boolean = _underlying_RegRequest.autoLogin
    override def _passthroughFields = _underlying_RegRequest._passthroughFields
  }
}

trait RegRequest
  extends ThriftStruct
  with scala.Product4[String, Option[String], Option[String], Boolean]
  with java.io.Serializable
{
  import RegRequest._

  def mobile: String
  def password: _root_.scala.Option[String]
  def loginName: _root_.scala.Option[String]
  def autoLogin: Boolean

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = mobile
  def _2 = password
  def _3 = loginName
  def _4 = autoLogin


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (mobile ne null) {
                writeMobileValue(mobile, _oprot)
                _root_.scala.Some(RegRequest.MobileField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (password.isDefined) {
                writePasswordValue(password.get, _oprot)
                _root_.scala.Some(RegRequest.PasswordField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (loginName.isDefined) {
                writeLoginNameValue(loginName.get, _oprot)
                _root_.scala.Some(RegRequest.LoginNameField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeAutoLoginValue(autoLogin, _oprot)
                _root_.scala.Some(RegRequest.AutoLoginField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): RegRequest = {
    var mobile: String = this.mobile
    var password: _root_.scala.Option[String] = this.password
    var loginName: _root_.scala.Option[String] = this.loginName
    var autoLogin: Boolean = this.autoLogin
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        mobile = readMobileValue(_blob.read)
      case 2 =>
        password = _root_.scala.Some(readPasswordValue(_blob.read))
      case 3 =>
        loginName = _root_.scala.Some(readLoginNameValue(_blob.read))
      case 4 =>
        autoLogin = readAutoLoginValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      mobile,
      password,
      loginName,
      autoLogin,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): RegRequest = {
    var mobile: String = this.mobile
    var password: _root_.scala.Option[String] = this.password
    var loginName: _root_.scala.Option[String] = this.loginName
    var autoLogin: Boolean = this.autoLogin

    _fieldId match {
      case 1 =>
        mobile = null
      case 2 =>
        password = _root_.scala.None
      case 3 =>
        loginName = _root_.scala.None
      case 4 =>
        autoLogin = true
      case _ =>
    }
    new Immutable(
      mobile,
      password,
      loginName,
      autoLogin,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetMobile: RegRequest = unsetField(1)

  def unsetPassword: RegRequest = unsetField(2)

  def unsetLoginName: RegRequest = unsetField(3)

  def unsetAutoLogin: RegRequest = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    RegRequest.validate(this)
    _oprot.writeStructBegin(Struct)
    if (mobile ne null) writeMobileField(mobile, _oprot)
    if (password.isDefined) writePasswordField(password.get, _oprot)
    if (loginName.isDefined) writeLoginNameField(loginName.get, _oprot)
    writeAutoLoginField(autoLogin, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    mobile: String = this.mobile,
    password: _root_.scala.Option[String] = this.password,
    loginName: _root_.scala.Option[String] = this.loginName,
    autoLogin: Boolean = this.autoLogin,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): RegRequest =
    new Immutable(
      mobile,
      password,
      loginName,
      autoLogin,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[RegRequest]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[RegRequest]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.mobile
    case 1 => this.password
    case 2 => this.loginName
    case 3 => this.autoLogin
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "RegRequest"
}