/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.itiancai.galaxy.dts.server

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftService, ThriftStruct,
  ThriftStructCodec, ThriftStructCodec3,
  ThriftStructFieldInfo, ThriftResponse, ThriftUtil, ToThriftService}
import com.twitter.finagle.{service => ctfs}
import com.twitter.finagle.thrift.{Protocols, ThriftClientRequest, ThriftServiceIface}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait DTSServerApi[+MM[_]] extends ThriftService {
  /**
       * 通过sysName和moduleName获取servicePath
       * @param sysName
       * @param moduleName
       * @return
       */
  def servicePath(sysName: String, moduleName: String): MM[String]
}



object DTSServerApi { self =>

  case class ServiceIface(
      servicePath : com.twitter.finagle.Service[self.ServicePath.Args, self.ServicePath.Result]
  ) extends BaseServiceIface

  // This is needed to support service inheritance.
  trait BaseServiceIface extends ToThriftService {
    def servicePath : com.twitter.finagle.Service[self.ServicePath.Args, self.ServicePath.Result]

    override def toThriftService: ThriftService = new MethodIface(this)
  }

  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        pf: TProtocolFactory = Protocols.binaryFactory(),
        stats: com.twitter.finagle.stats.StatsReceiver
      ): ServiceIface =
        new ServiceIface(
          servicePath = ThriftServiceIface(self.ServicePath, binaryService, pf, stats)
      )
  }

  class MethodIface(serviceIface: BaseServiceIface)
    extends DTSServerApi[Future] {
    private[this] val __servicePath_service =
      ThriftServiceIface.resultFilter(self.ServicePath) andThen serviceIface.servicePath
    def servicePath(sysName: String, moduleName: String): Future[String] =
      __servicePath_service(self.ServicePath.Args(sysName, moduleName))
  }

  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, DTSServerApi[Future]] {
    def newMethodIface(serviceIface: ServiceIface): DTSServerApi[Future] =
      new MethodIface(serviceIface)
  }

  object ServicePath extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("servicePath_args")
      val SysNameField = new TField("sysName", TType.STRING, 1)
      val SysNameFieldManifest = implicitly[Manifest[String]]
      val ModuleNameField = new TField("moduleName", TType.STRING, 2)
      val ModuleNameFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SysNameField,
          false,
          true,
          SysNameFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          ModuleNameField,
          false,
          true,
          ModuleNameFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
        if (_item.sysName == null) throw new TProtocolException("Required field sysName cannot be null")
        if (_item.moduleName == null) throw new TProtocolException("Required field moduleName cannot be null")
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          sysName =
            {
              val field = original.sysName
              field
            },
          moduleName =
            {
              val field = original.moduleName
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var sysName: String = null
        var _got_sysName = false
        var moduleName: String = null
        var _got_moduleName = false
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    sysName = readSysNameValue(_iprot)
                    _got_sysName = true
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'sysName' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRING =>
                    moduleName = readModuleNameValue(_iprot)
                    _got_moduleName = true
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'moduleName' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        if (!_got_sysName) throw new TProtocolException("Required field 'sysName' was not found in serialized data for struct Args")
        if (!_got_moduleName) throw new TProtocolException("Required field 'moduleName' was not found in serialized data for struct Args")
        new Args(
          sysName,
          moduleName,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        sysName: String,
        moduleName: String
      ): Args =
        new Args(
          sysName,
          moduleName
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, String]] = _root_.scala.Some(_item)
    
    
      @inline private def readSysNameValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeSysNameField(sysName_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SysNameField)
        writeSysNameValue(sysName_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSysNameValue(sysName_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(sysName_item)
      }
    
      @inline private def readModuleNameValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeModuleNameField(moduleName_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ModuleNameField)
        writeModuleNameValue(moduleName_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeModuleNameValue(moduleName_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(moduleName_item)
      }
    
    
    }
    
    class Args(
        val sysName: String,
        val moduleName: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, String]
      with java.io.Serializable
    {
      import Args._
      def this(
        sysName: String,
        moduleName: String
      ) = this(
        sysName,
        moduleName,
        Map.empty
      )
    
      def _1 = sysName
      def _2 = moduleName
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (sysName ne null) writeSysNameField(sysName, _oprot)
        if (moduleName ne null) writeModuleNameField(moduleName, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        sysName: String = this.sysName,
        moduleName: String = this.moduleName,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          sysName,
          moduleName,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.sysName
        case 1 => this.moduleName
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = String
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("servicePath_result")
      val SuccessField = new TField("success", TType.STRING, 0)
      val SuccessFieldManifest = implicitly[Manifest[String]]
      val EField = new TField("e", TType.STRUCT, 1)
      val EFieldManifest = implicitly[Manifest[com.itiancai.galaxy.dts.server.ServiceNotFindException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          EField,
          true,
          false,
          EFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            },
          e =
            {
              val field = original.e
              field.map { field =>
                com.itiancai.galaxy.dts.server.ServiceNotFindException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[String] = _root_.scala.None
        var e: _root_.scala.Option[com.itiancai.galaxy.dts.server.ServiceNotFindException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRING =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    e = _root_.scala.Some(readEValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'e' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          e,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[String] = _root_.scala.None,
        e: _root_.scala.Option[com.itiancai.galaxy.dts.server.ServiceNotFindException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          e
        )
    
      def unapply(_item: Result): _root_.scala.Option[scala.Product2[Option[String], Option[com.itiancai.galaxy.dts.server.ServiceNotFindException]]] = _root_.scala.Some(_item)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeSuccessField(success_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(success_item)
      }
    
      @inline private def readEValue(_iprot: TProtocol): com.itiancai.galaxy.dts.server.ServiceNotFindException = {
        com.itiancai.galaxy.dts.server.ServiceNotFindException.decode(_iprot)
      }
    
      @inline private def writeEField(e_item: com.itiancai.galaxy.dts.server.ServiceNotFindException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(EField)
        writeEValue(e_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeEValue(e_item: com.itiancai.galaxy.dts.server.ServiceNotFindException, _oprot: TProtocol): Unit = {
        e_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[String],
        val e: _root_.scala.Option[com.itiancai.galaxy.dts.server.ServiceNotFindException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[String] with ThriftStruct
      with scala.Product2[Option[String], Option[com.itiancai.galaxy.dts.server.ServiceNotFindException]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[String] = _root_.scala.None,
        e: _root_.scala.Option[com.itiancai.galaxy.dts.server.ServiceNotFindException] = _root_.scala.None
      ) = this(
        success,
        e,
        Map.empty
      )
    
      def _1 = success
      def _2 = e
    
      def successField: Option[String] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(e)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (e.isDefined) writeEField(e.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[String] = this.success,
        e: _root_.scala.Option[com.itiancai.galaxy.dts.server.ServiceNotFindException] = this.e,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          e,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.e
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[String]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "servicePath"
    val serviceName = "DTSServerApi"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val servicePath$args = ServicePath.Args
  type servicePath$args = ServicePath.Args

  val servicePath$result = ServicePath.Result
  type servicePath$result = ServicePath.Result


  trait FutureIface extends DTSServerApi[Future] {
    /**
         * 通过sysName和moduleName获取servicePath
         * @param sysName
         * @param moduleName
         * @return
         */
    def servicePath(sysName: String, moduleName: String): Future[String]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "DTSServerApi",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver,
      responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default)
    extends DTSServerApi$FinagleClient(
      service,
      protocolFactory,
      serviceName,
      stats,
      responseClassifier)
    with FutureIface {

    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory,
      serviceName: String,
      stats: com.twitter.finagle.stats.StatsReceiver
    ) = this(service, protocolFactory, serviceName, stats, ctfs.ResponseClassifier.Default)
  }

  class FinagledService(
      iface: FutureIface,
      protocolFactory: TProtocolFactory)
    extends DTSServerApi$FinagleService(
      iface,
      protocolFactory)
}